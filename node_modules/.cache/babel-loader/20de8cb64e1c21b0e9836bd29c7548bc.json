{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/Works/Devs/project/tcc/projeto-rubi/rubi-now/src/components/Alert/Alert.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { history } from './Helpers';\nimport { alertService, alertType } from './Services';\nconst propTypes = {\n  id: PropTypes.string,\n  fade: PropTypes.bool\n};\nconst defaultProps = {\n  id: 'default-alert',\n  fade: true\n};\n\nclass Alert extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      alerts: []\n    };\n  }\n\n  componentDidMount() {\n    // subscribe to new alert notifications\n    this.subscription = alertService.onAlert(this.props.id).subscribe(alert => {\n      // clear alerts when an empty alert is received\n      if (!alert.message) {\n        // filter out alerts without 'keepAfterRouteChange' flag\n        const alerts = this.state.alerts.filter(x => x.keepAfterRouteChange); // remove 'keepAfterRouteChange' flag on the rest\n\n        alerts.forEach(x => delete x.keepAfterRouteChange);\n        this.setState({\n          alerts\n        });\n        return;\n      } // add alert to array\n\n\n      this.setState({\n        alerts: [...this.state.alerts, alert]\n      }); // auto close alert if required\n\n      if (alert.autoClose) {\n        setTimeout(() => this.removeAlert(alert), 3000);\n      }\n    }); // clear alerts on location change\n\n    this.historyUnlisten = history.listen(() => {\n      alertService.clear(this.props.id);\n    });\n  }\n\n  componentWillUnmount() {\n    // unsubscribe & unlisten to avoid memory leaks\n    this.subscription.unsubscribe();\n    this.historyUnlisten();\n  }\n\n  removeAlert(alert) {\n    if (this.props.fade) {\n      // fade out alert\n      const alertWithFade = { ...alert,\n        fade: true\n      };\n      this.setState({\n        alerts: this.state.alerts.map(x => x === alert ? alertWithFade : x)\n      }); // remove alert after faded out\n\n      setTimeout(() => {\n        this.setState({\n          alerts: this.state.alerts.filter(x => x !== alertWithFade)\n        });\n      }, 250);\n    } else {\n      // remove alert\n      this.setState({\n        alerts: this.state.alerts.filter(x => x !== alert)\n      });\n    }\n  }\n\n  cssClasses(alert) {\n    if (!alert) return;\n    const classes = ['alert', 'alert-dismissable'];\n    const alertTypeClass = {\n      [alertType.success]: 'alert alert-success',\n      [alertType.error]: 'alert alert-danger',\n      [alertType.info]: 'alert alert-info',\n      [alertType.warning]: 'alert alert-warning'\n    };\n    classes.push(alertTypeClass[alert.type]);\n\n    if (alert.fade) {\n      classes.push('fade');\n    }\n\n    return classes.join(' ');\n  }\n\n  render() {\n    const {\n      alerts\n    } = this.state;\n    if (!alerts.length) return null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"m-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, alerts.map((alert, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: this.cssClasses(alert),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"close\",\n      onClick: () => this.removeAlert(alert),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }\n    }, \"\\xD7\"), /*#__PURE__*/React.createElement(\"span\", {\n      dangerouslySetInnerHTML: {\n        __html: alert.message\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nAlert.propTypes = propTypes;\nAlert.defaultProps = defaultProps;\nexport { Alert };","map":{"version":3,"sources":["/home/gabriel/Works/Devs/project/tcc/projeto-rubi/rubi-now/src/components/Alert/Alert.jsx"],"names":["React","PropTypes","history","alertService","alertType","propTypes","id","string","fade","bool","defaultProps","Alert","Component","constructor","props","state","alerts","componentDidMount","subscription","onAlert","subscribe","alert","message","filter","x","keepAfterRouteChange","forEach","setState","autoClose","setTimeout","removeAlert","historyUnlisten","listen","clear","componentWillUnmount","unsubscribe","alertWithFade","map","cssClasses","classes","alertTypeClass","success","error","info","warning","push","type","join","render","length","index","__html"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { history } from './Helpers';\r\nimport { alertService, alertType } from './Services';\r\n\r\nconst propTypes = {\r\n    id: PropTypes.string,\r\n    fade: PropTypes.bool\r\n};\r\n\r\nconst defaultProps = {\r\n    id: 'default-alert',\r\n    fade: true\r\n};\r\n\r\nclass Alert extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            alerts: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // subscribe to new alert notifications\r\n        this.subscription = alertService.onAlert(this.props.id)\r\n            .subscribe(alert => {\r\n                // clear alerts when an empty alert is received\r\n                if (!alert.message) {\r\n                    // filter out alerts without 'keepAfterRouteChange' flag\r\n                    const alerts = this.state.alerts.filter(x => x.keepAfterRouteChange);\r\n\r\n                    // remove 'keepAfterRouteChange' flag on the rest\r\n                    alerts.forEach(x => delete x.keepAfterRouteChange);\r\n\r\n                    this.setState({ alerts });\r\n                    return;\r\n                }\r\n\r\n                // add alert to array\r\n                this.setState({ alerts: [...this.state.alerts, alert] });\r\n\r\n                // auto close alert if required\r\n                if (alert.autoClose) {\r\n                    setTimeout(() => this.removeAlert(alert), 3000);\r\n                }\r\n            });\r\n\r\n        // clear alerts on location change\r\n        this.historyUnlisten = history.listen(() => {\r\n            alertService.clear(this.props.id);\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // unsubscribe & unlisten to avoid memory leaks\r\n        this.subscription.unsubscribe();\r\n        this.historyUnlisten();\r\n    }\r\n\r\n    removeAlert(alert) {\r\n        if (this.props.fade) {\r\n            // fade out alert\r\n            const alertWithFade = { ...alert, fade: true };\r\n            this.setState({ alerts: this.state.alerts.map(x => x === alert ? alertWithFade : x) });\r\n\r\n            // remove alert after faded out\r\n            setTimeout(() => {\r\n                this.setState({ alerts: this.state.alerts.filter(x => x !== alertWithFade) })\r\n            }, 250);\r\n        } else {\r\n            // remove alert\r\n            this.setState({ alerts: this.state.alerts.filter(x => x !== alert) })\r\n        }\r\n    }\r\n\r\n    cssClasses(alert) {\r\n        if (!alert) return;\r\n\r\n        const classes = ['alert', 'alert-dismissable'];\r\n                \r\n        const alertTypeClass = {\r\n            [alertType.success]: 'alert alert-success',\r\n            [alertType.error]: 'alert alert-danger',\r\n            [alertType.info]: 'alert alert-info',\r\n            [alertType.warning]: 'alert alert-warning'\r\n        }\r\n\r\n        classes.push(alertTypeClass[alert.type]);\r\n\r\n        if (alert.fade) {\r\n            classes.push('fade');\r\n        }\r\n\r\n        return classes.join(' ');\r\n    }\r\n\r\n    render() {\r\n        const { alerts } = this.state;\r\n        if (!alerts.length) return null;\r\n        return (\r\n            <div className=\"m-3\">\r\n                {alerts.map((alert, index) =>\r\n                    <div key={index} className={this.cssClasses(alert)}>\r\n                        <a className=\"close\" onClick={() => this.removeAlert(alert)}>&times;</a>\r\n                        <span dangerouslySetInnerHTML={{__html: alert.message}}></span>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAlert.propTypes = propTypes;\r\nAlert.defaultProps = defaultProps;\r\nexport { Alert };"]},"metadata":{},"sourceType":"module"}